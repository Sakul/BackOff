// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BackOff.Shared.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VerifyOTPFeature : object, Xunit.IClassFixture<VerifyOTPFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VerifyOTP.feature"
#line hidden
        
        public VerifyOTPFeature(VerifyOTPFeature.FixtureData fixtureData, BackOff_Shared_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VerifyOTP", "\tIn order to ตรวจสอบความถูกต้องการยืนยันรหัสลับ และป้องกันการทำ Brute force\r\n\tAs " +
                    "a ระบบ\r\n\tI want ป้องกันไม่ให้ระบบถูกโกงจากทุกกรณี", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("ระบบทำการกำหนดค่าเริ่มต้นของการทำ OTP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("ขณะนี้เวลา \'1/1/2020 00:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ยืนยัน OTP ถูกต้อง ระบบกำหนดให้การยืนยันผ่าน และทำการรีเซ็ต attempt cout ของเบอร์" +
            "นี้")]
        [Xunit.TraitAttribute("FeatureTitle", "VerifyOTP")]
        [Xunit.TraitAttribute("Description", "ยืนยัน OTP ถูกต้อง ระบบกำหนดให้การยืนยันผ่าน และทำการรีเซ็ต attempt cout ของเบอร์" +
            "นี้")]
        public virtual void ยนยนOTPถกตองระบบกำหนดใหการยนยนผานและทำการรเซตAttemptCoutของเบอรน()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ยืนยัน OTP ถูกต้อง ระบบกำหนดให้การยืนยันผ่าน และทำการรีเซ็ต attempt cout ของเบอร์" +
                    "นี้", null, ((string[])(null)));
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Phone",
                            "Code",
                            "AttemptCount"});
                table6.AddRow(new string[] {
                            "0914185400",
                            "A1B2C3",
                            "0"});
#line 11
 testRunner.Given("ในระบบมีข้อมูลการขอรหัส OTP เป็นดังนี้", ((string)(null)), table6, "Given ");
#line hidden
#line 14
 testRunner.When("ทำการยืนยัน OTP ของเบอร์ \'0914185400\' ด้วยรหัส \'A1B2C3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("ระบบกำหนดให้การยืนยันผ่าน โดยเป็นการทำครั้งที่ \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.And("ระบบทำการรีเซ็ต attempt count ของเบอร์ \'0914185400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ยืนยัน OTP ไม่ถูกต้อง ระบบกำหนดให้การยืนยันไม่ผ่าน และไม่ทำการรีเซ็ต attempt cout" +
            " ของเบอร์นี้")]
        [Xunit.TraitAttribute("FeatureTitle", "VerifyOTP")]
        [Xunit.TraitAttribute("Description", "ยืนยัน OTP ไม่ถูกต้อง ระบบกำหนดให้การยืนยันไม่ผ่าน และไม่ทำการรีเซ็ต attempt cout" +
            " ของเบอร์นี้")]
        public virtual void ยนยนOTPไมถกตองระบบกำหนดใหการยนยนไมผานและไมทำการรเซตAttemptCoutของเบอรน()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ยืนยัน OTP ไม่ถูกต้อง ระบบกำหนดให้การยืนยันไม่ผ่าน และไม่ทำการรีเซ็ต attempt cout" +
                    " ของเบอร์นี้", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Phone",
                            "Code",
                            "AttemptCount"});
                table7.AddRow(new string[] {
                            "0914185400",
                            "A1B2C3",
                            "0"});
#line 19
 testRunner.Given("ในระบบมีข้อมูลการขอรหัส OTP เป็นดังนี้", ((string)(null)), table7, "Given ");
#line hidden
#line 22
 testRunner.When("ทำการยืนยัน OTP ของเบอร์ \'0914185400\' ด้วยรหัส \'Invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("ระบบกำหนดให้การยืนยันไม่ผ่าน โดยเป็นการทำครั้งที่ \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And("ระบบไม่รีเซ็ต attempt count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="เบอร์ที่ยืนยัน OTP ผิดแต่ยังไม่เกิน 7 ครั้งทำการยืนยันรหัสผ่านถูกต้อง ระบบกำหนดให" +
            "้การยืนยันผ่าน และทำการรีเซ็ต attempt cout ของเบอร์นี้")]
        [Xunit.TraitAttribute("FeatureTitle", "VerifyOTP")]
        [Xunit.TraitAttribute("Description", "เบอร์ที่ยืนยัน OTP ผิดแต่ยังไม่เกิน 7 ครั้งทำการยืนยันรหัสผ่านถูกต้อง ระบบกำหนดให" +
            "้การยืนยันผ่าน และทำการรีเซ็ต attempt cout ของเบอร์นี้")]
        [Xunit.InlineDataAttribute("0914185401", "A1B2C3", "2", new string[0])]
        [Xunit.InlineDataAttribute("0914185402", "A1B2C3", "3", new string[0])]
        [Xunit.InlineDataAttribute("0914185403", "A1B2C3", "4", new string[0])]
        [Xunit.InlineDataAttribute("0914185404", "A1B2C3", "5", new string[0])]
        [Xunit.InlineDataAttribute("0914185405", "A1B2C3", "6", new string[0])]
        [Xunit.InlineDataAttribute("0914185406", "A1B2C3", "7", new string[0])]
        public virtual void เบอรทยนยนOTPผดแตยงไมเกน7ครงทำการยนยนรหสผานถกตองระบบกำหนดใหการยนยนผานและทำการรเซตAttemptCoutของเบอรน(string phone, string code, string expectedAttemptCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("เบอร์ที่ยืนยัน OTP ผิดแต่ยังไม่เกิน 7 ครั้งทำการยืนยันรหัสผ่านถูกต้อง ระบบกำหนดให" +
                    "้การยืนยันผ่าน และทำการรีเซ็ต attempt cout ของเบอร์นี้", null, exampleTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Phone",
                            "Code",
                            "AttemptCount"});
                table8.AddRow(new string[] {
                            "0914185401",
                            "A1B2C3",
                            "1"});
                table8.AddRow(new string[] {
                            "0914185402",
                            "A1B2C3",
                            "2"});
                table8.AddRow(new string[] {
                            "0914185403",
                            "A1B2C3",
                            "3"});
                table8.AddRow(new string[] {
                            "0914185404",
                            "A1B2C3",
                            "4"});
                table8.AddRow(new string[] {
                            "0914185405",
                            "A1B2C3",
                            "5"});
                table8.AddRow(new string[] {
                            "0914185406",
                            "A1B2C3",
                            "6"});
#line 27
 testRunner.Given("ในระบบมีข้อมูลการขอรหัส OTP เป็นดังนี้", ((string)(null)), table8, "Given ");
#line hidden
#line 35
 testRunner.When(string.Format("ทำการยืนยัน OTP ของเบอร์ \'{0}\' ด้วยรหัส \'{1}\'", phone, code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then(string.Format("ระบบกำหนดให้การยืนยันผ่าน โดยเป็นการทำครั้งที่ \'{0}\'", expectedAttemptCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And(string.Format("ระบบทำการรีเซ็ต attempt count ของเบอร์ \'{0}\'", phone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="เบอร์ที่ยืนยัน OTP ผิดเกิน 7 ครั้งทำการยืนยันรหัสผ่าน ระบบกำหนดให้การยืนยันไม่ผ่า" +
            "น และไม่รีเซ็ต attempt cout")]
        [Xunit.TraitAttribute("FeatureTitle", "VerifyOTP")]
        [Xunit.TraitAttribute("Description", "เบอร์ที่ยืนยัน OTP ผิดเกิน 7 ครั้งทำการยืนยันรหัสผ่าน ระบบกำหนดให้การยืนยันไม่ผ่า" +
            "น และไม่รีเซ็ต attempt cout")]
        [Xunit.InlineDataAttribute("0914185407", "A1B2C3", "7", new string[0])]
        [Xunit.InlineDataAttribute("0914185407", "Invalid", "7", new string[0])]
        public virtual void เบอรทยนยนOTPผดเกน7ครงทำการยนยนรหสผานระบบกำหนดใหการยนยนไมผานและไมรเซตAttemptCout(string phone, string code, string expectedAttemptCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("เบอร์ที่ยืนยัน OTP ผิดเกิน 7 ครั้งทำการยืนยันรหัสผ่าน ระบบกำหนดให้การยืนยันไม่ผ่า" +
                    "น และไม่รีเซ็ต attempt cout", null, exampleTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Phone",
                            "Code",
                            "AttemptCount"});
                table9.AddRow(new string[] {
                            "0914185407",
                            "A1B2C3",
                            "7"});
#line 49
 testRunner.Given("ในระบบมีข้อมูลการขอรหัส OTP เป็นดังนี้", ((string)(null)), table9, "Given ");
#line hidden
#line 52
 testRunner.When(string.Format("ทำการยืนยัน OTP ของเบอร์ \'{0}\' ด้วยรหัส \'{1}\'", phone, code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then(string.Format("ระบบกำหนดให้การยืนยันไม่ผ่าน โดยเป็นการทำครั้งที่ \'{0}\'", expectedAttemptCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("ระบบไม่รีเซ็ต attempt count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VerifyOTPFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VerifyOTPFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
